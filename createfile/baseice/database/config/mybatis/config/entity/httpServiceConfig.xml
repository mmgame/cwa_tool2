<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.cwa.data.config.domain.HttpServiceConfig">
	<resultMap id="httpServiceConfig" type="com.cwa.data.config.domain.HttpServiceConfig">
		<result column="gid" property="gid" />
		<result column="ftype" property="ftype" />
		<result column="key" property="key" />
		<result column="version" property="version" />
		<result column="available" property="available" />
		<result column="initPriority" property="initPriority" />
		<result column="listening" property="listening" />
		<result column="minpool" property="minpool" />
		<result column="maxpool" property="maxpool" />
	</resultMap>
	
	<select id="selectByGidAndFtypeAndKey" resultMap="httpServiceConfig">
		select * from `${table_number}_httpService` where (`gid`=#{gid} and `ftype`=#{ftype} and `key`=#{key})
	</select>
	<select id="selectByGidAndFtype" resultMap="httpServiceConfig">
		select * from `${table_number}_httpService` where (`gid`=#{gid} and `ftype`=#{ftype})
	</select>
	<select id="selectByGid" resultMap="httpServiceConfig">
		select * from `${table_number}_httpService` where (`gid`=#{gid})
	</select>
	
	<select id="selectAllEntity" resultMap="httpServiceConfig">
		select * from `${table_number}_httpService`
	</select>
	
	<insert id="insert" parameterType="java.util.Map">
		insert into `${table_number}_httpService` (`gid`,`ftype`,`key`,`version`,`available`,`initPriority`,`listening`,`minpool`,`maxpool`) values (#{entity.gid},#{entity.ftype},#{entity.key},#{entity.version},#{entity.available},#{entity.initPriority},#{entity.listening},#{entity.minpool},#{entity.maxpool})
	</insert>
	
	<update id="update" parameterType="java.util.Map">
		update `${table_number}_httpService` set `gid`=#{entity.gid},`ftype`=#{entity.ftype},`key`=#{entity.key},`version`=#{entity.version},`available`=#{entity.available},`initPriority`=#{entity.initPriority},`listening`=#{entity.listening},`minpool`=#{entity.minpool},`maxpool`=#{entity.maxpool} where (`gid`=#{entity.gid} and `ftype`=#{entity.ftype} and `key`=#{entity.key})
	</update>
	
	<delete id="remove" parameterType="java.util.Map">
		delete from `${table_number}_httpService` where (`gid`=#{entity.gid} and `ftype`=#{entity.ftype} and `key`=#{entity.key})
	</delete>
	
	<insert id="batchInsert" parameterType="java.util.Map">
		insert into `${table_number}_httpService` (`gid`,`ftype`,`key`,`version`,`available`,`initPriority`,`listening`,`minpool`,`maxpool`) values 
		<foreach collection="entity_list" item="item" index="index" separator=",">
		(#{item.gid},#{item.ftype},#{item.key},#{item.version},#{item.available},#{item.initPriority},#{item.listening},#{item.minpool},#{item.maxpool})
		</foreach> 
	</insert> 
	
	<delete id= "batchRemove" parameterType="java.util.Map">
		delete from `${table_number}_httpService` where
       <foreach collection="entity_list" item= "item" index ="index" separator="or">
       (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key})
       </foreach>
    </delete>
    
	<select id="selectAllTableName" parameterType="java.util.Map">
		select TABLE_NAME from information_schema.tables where TABLE_SCHEMA = #{db_number} and TABLE_NAME like 'httpService\_%'
	</select>
	
	<update id="createTable" parameterType="java.util.Map">
		CREATE TABLE `${table_number}_httpService` (
			`gid` int(11) DEFAULT '0',
			`ftype` int(11) DEFAULT '0',
			`key` varchar(30) DEFAULT '',
			`version` int(11) DEFAULT '0',
			`available` int(11) DEFAULT '0',
			`initPriority` int(11) DEFAULT '0',
			`listening` int(11) DEFAULT '0',
			`minpool` int(11) DEFAULT '0',
			`maxpool` int(11) DEFAULT '0',
		PRIMARY KEY (`gid`,`ftype`,`key`),
		KEY `gid_ftype` (`gid`,`ftype`),
		KEY `gid` (`gid`)
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	</update>
	
	<update id="batchUpdate" parameterType="java.util.Map">
		 update `${table_number}_httpService` set 
		 `gid`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.gid} 
       	</foreach>
        end,
		 `ftype`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.ftype} 
       	</foreach>
        end,
		 `key`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.key} 
       	</foreach>
        end,
		 `version`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.version} 
       	</foreach>
        end,
		 `available`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.available} 
       	</foreach>
        end,
		 `initPriority`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.initPriority} 
       	</foreach>
        end,
		 `listening`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.listening} 
       	</foreach>
        end,
		 `minpool`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.minpool} 
       	</foreach>
        end,
		 `maxpool`=case 
		 <foreach collection="entity_list" item="item" index="index">
           when (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key}) then #{item.maxpool} 
       	</foreach>
        end
		where
       	<foreach collection="entity_list" item="item" index="index" separator="or">
        (`gid`=#{item.gid} and `ftype`=#{item.ftype} and `key`=#{item.key})
       	</foreach>
	</update>
</mapper>